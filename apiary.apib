FORMAT: 1A
Host: http://sendgrid.apiary.io <!-- Future Home: http://api.devrelapi.com -->

# SendGrid Dev Rel API
This API allows you to interact with data related to Dev Rel (Developer Relations) KPIs (Key Performance Indicators).

## Authentication
Currently the SendGrid Dev Rel API does not provide authenticated access. It will support Basic and OAuth authentication when complete.

# Group Team
A representation of the Dev Rel team, the evangelists and ambassadors.

## Team [/team/{id}]
A single Team object, it represents a single person.

Required attributes: 

- `id`          Automatically assigned
- `created_at`  Automatically assigned
- `type`        Evangelist or Ambassador
- `first_name`
- `last_name`
- `email`
- `phone`
- `home_city`

+ Parameters
    + id (required, int) ... SalesForce ID of the team member in the form of an integer

+ Model (application/json)

    + Body

            {
                "id": 0,
                "created_at": "2014-01-01T00:00:00Z",
                "type": "Hacker in Residence",
                "first_name": "Elmer",
                "last_name": "Thomas",
                "email": "elmer@sendgrid.com",
                "phone": "951.801.4624",
                "home_city": "Riverside"
            }

### Retrieve a single Team member [GET]
+ Response 200 (application/json)

    [Team][]

### Edit a Team member [PATCH]

+ Request (application/json)

        {
            "email": "elmer.thomas@sendgrid.com",
        }

+ Response 200
    
    [Team][]

### Delete a Team member [DELETE]

+ Response 204

### Create a Team member [PUT]
TODO: Add error return values

+ Request (application/json)

        {
            "type": "Ambassador",
            "first_name": "Ultimate",
            "last_name": "Warrior",
            "email": "ultimate@warrior.com",
            "phone": "999.999.9999",
            "home city": "Parts Unknown"
        }

+ Response 201

    [Team][]

## Team Collection [/team]
Get all of the Team members.

Attributes:

- `total` Total number of records returned

+ Model (application/json)

    + Body

            {
                "team": [
                    {
                        "id": 0,
                        "created_at": "2014-01-01T00:00:00Z",
                        "type": "Hacker in Residence",
                        "first_name": "Elmer",
                    },
                    {
                        "id": 1,
                        "created_at": "2014-01-01T00:00:00Z",
                        "type": "Director of Developer Relations",
                        "first_name": "Tim",
                    },
                    {
                        "id": 2,
                        "created_at": "2014-01-01T00:00:00Z",
                        "type": "Lead Developer Evangelist",
                        "first_name": "Brandon",
                    }
                ],
                "total": 3
            }

### List All Team members [GET]
+ Response 200

    [Team Collection][]

# Group Relationships
Relationships created by the Dev Rel team (or Dev Rel systems such as hack.sendgrid.com or sendgrid.com/developers or generated by coupon codes)

## Relationship [/relationship/{id}]
A single Relationship object, representing one relationship.

Required attributes: 

- `id`          Automatically assigned
- `created_at`  Automatically assigned
- `owner`       Who obtained the lead, represented as the ID of an Evangelist/Ambassador or can be hack.sendgrid.com or sendgrid.com/developers or coupon code
- `first_name`
- `email`
- `status` Hot sales lead, Dev rel nurture [in this case no sales/marketing person will contact], Store as contact, Reseller) TODO: cover all cases and allow for arrays

Optional attributes:

- `company_name`
- `volume` Monthly email volume, this metric is key for sales and biz dev / reseller team(s)
- `location` Where the lead was captured [Event, Email, etc.], this should be linked to the Event resource
- `event_date`
- `last_name`
- `job_title`
- `function` Developer, Front end, Back end, Design, etc
- `website`
- `phone_number`
- `city`
- `state`
- `country`
- `use_case` Description of how they are using SendGrid
- `feedback` Customer product feedback
- `github`
- `twitter`
- `linkedin`
- `gplus`
- `facebook`
- `notes` Additional comments

+ Parameters
    + id (required, int) ... ID of the Relationship in the form of an integer

+ Model (application/json)

    + Body

            {
                "id": 0,
                "created_at": "2014-01-01T00:00:00Z",
                "owner": "Elmer",
                "first_name": "E-Dizzle",
                "email": "elmer.thomas@edizzle.com",
                "status": "dev rel nurture",
                "volume": 1000000,
                "location": "McHack",
                "event_date": "2013-12-31",
                "last_name": "T-Sizzle",
                "job_title": "Hacker in Residence",
                "function": "Comedian",
                "website": "www.edizzle.com",
                "phone_number": "951-801-4624",
                "city": "Riverside",
                "state": "CA",
                "country": "USA",
                "use_case": "To help developers deliver the awesome, E-Dizzle style.",
                "feedback": "MOAR Parse API features.",
                "github": "thinkingserious",
                "twitter": "thinkingserious",
                "linkedin": "thinkingserious",
                "gplus": "+ElmerThomas",
                "facebook": "thinkingserious",
                "notes": "This guy wears a computer on his face. Might want to keep your distance."
            }

### Retrieve a single Relationship [GET]
+ Response 200 (application/json)
    
    [Relationship][]

### Edit a Relationship [PATCH]
To update a Relationship send a JSON with updated value for one or more of the Relationship resource attributes. All attributes values (states) from the previous version of this Relationship are carried over by default if not included in the hash.

+ Request (application/json)

        {
            "company_name": "E-Dizzle Enterprises",
        }

+ Response 200
    
    [Relationship][]

### Delete a Relationship [DELETE]

+ Response 204

### Create a Relationship [POST]

+ Request (application/json)

        {
            "owner": "Elmer",
            "first_name": "Hulk",
            "email": "hulkster@hulk.hogan.com",
            "status": "dev rel nurture"
        }

+ Response 201

    [Relationship][]

## Relationship Collection [/relationship{?start_date,end_date}]
Collection of all Relationships.

Attributes:

- total

+ Model (application/json)

    + Body

            {
                "relationship": [
                    {
                        "id": 0,
                        "created_at": "2014-01-01T00:00:00Z",
                        "owner": "Elmer",
                        "first_name": "E-Dizzle",
                        "email": "elmer.thomas@edizzle.com",
                        "status": "dev rel nurture"
                    },
                    {
                        "id": 1,
                        "created_at": "2014-01-01T00:00:00Z",
                        "owner": "Tim",
                        "first_name": "T-Feezy",
                        "email": "tim.falls@tfeezy.com",
                        "status": "hot sales lead"
                    },
                    {
                        "id": 2,
                        "created_at": "2014-01-01T00:00:00Z",
                        "owner": "Brandon",
                        "first_name": "Mr West",
                        "email": "brandon.west@mrwest.com",
                        "status": "hot sales lead"
                    }
                ],
                "total": 3
            }
        
### List All Relationships [GET]

+ Parameters
    + start_date (optional, string) ... Timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ` Only Relationships created at or after this time are returned
    + end_date (optional, string) ... Timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ` Truncate returned Relationships on this date

+ Response 200

    [Relationship Collection][]

# Group Events
Event creation and tracking.

## Event [/event/{id}]

Required attributes:

- `id` Automatically assigned
- `created_at` Automatically assigned
- `owner` ID of an Evangelist or Ambassador
- `event_name`
- `event_short_description`
- `event_long_description`
- `who_is_attending`
- `start_date`
- `end_date`
- `name_of_venue`
- `address`
- `city`
- `state`
- `country`
- `event_type` Hackathon, Conference, Meetup/Community event, Startup Weekend, Pitch competition / Demo day, Other
- `sendgrid_api_usages`
- `number_of_attendees`
- `participation` Demo sendgrid api, Serve as mentor, Deliver a technical workshop, Deliver a presentation/talk, Exhibit [i.e. have a table/booth], Sponsor, Help organize, Other
- `audience_type` Mosly technical [devs, designers, etc], Mostly non-technical [marketers, entrepreneur, etc], Evenly split between technical and non-technical
- `education_focused` Student-driven, University/School affiliated, Youth coding, etc.
- `should_we_attend`
- `registration_link` If registration is closed, link to the home page
- `comments` Winners, Organizers, Other sponsors, etc

Optional attributes:

- `start_time`
- `end_time`
- `twitter`
- `hash_tag`

+ Parameters
    + id (required, ID) ... ID of the Relationship in the form of an integer

+ Model (application/json)

    + Body
    
            {
                "id": 0,
                "created_at": "2014-01-01T00:00:00Z‚Äù,
                "owner": "Elmer",
                "event_name": "McHack",
                "event_short_description": "Find out who can make the best McBurger.",
                "event_long_description": "Find out who can make the best McBurger. Given some burgers, cheese and condiments, let's see what you can do in 24 hours.",
                "who_is_attending": "Elmer, SendGrid",
                "start_date": "2014-04-01",
                "end_date": "2014-04-05",
                "name_of_venue": "McDonalds",
                "address": "400 N. Lee Street",
                "city": "Des Plaines",
                "state": "IL",
                "country": "USA",
                "event_type": "other, cookathon",
                "sendgrid_api_uses": 0,
                "number_of_attendees": 100,
                "partipation": "demo sendgrid api, serve as mentor, other, cook",
                "audience_type": "evenly split between technical and non-technical",
                "education_focused": 1,
                "should_we_attend": 1,
                "registration_link": "www.mchack.com",
                "comments": "This was the most delicious hackathon ever. We should try to attend one for Burger King too."
                "start_time": "6:00pm",
                "end_time": "6:00pm",
                "twitter": "mchack",
                "hash_tag": "burgerandfries"
            }
            
### Retrieve a single Event [GET]
+ Response 200 (application/json)
    
    [Event][]

### Edit a Event [PATCH]

+ Request (application/json)

        {
            "twitter": "SendGrid",
        }

+ Response 200
    
    [Event][]

### Delete a Event [DELETE]

+ Response 204

### Create an Event [POST]

+ Request (application/json)

        {
                "owner": 0,
                "event_name": "BurgerKingHack",
                "event_short_description": "Find out who can make the best Burger King Burger.",
                "event_long_description": "Find out who can make the best Burger King. Given some burgers, cheese and condiments, let's see what you can do in 24 hours.",
                "who_is_attending": "Elmer, SendGrid",
                "start_date": "2014-04-06",
                "end_date": "2014-04-10",
                "name_of_venue": "Burger King",
                "address": "401 N. Lee Street",
                "city": "Des Plaines",
                "state": "IL",
                "country": "USA",
                "event_type": "other, cookathon",
                "sendgrid_api_uses": 0,
                "number_of_attendees": 50,
                "partipation": "demo sendgrid api, other, cook",
                "audience_type": "evenly split between technical and non-technical",
                "education_focused": 1,
                "should_we_attend": 0,
                "registration_link": "www.burgerkinghack.com",
                "comments": "This hackathon was terrible, let's stick to McHack."
        }

+ Response 201

    [Event][]

## Event Collection [/event{?start_date,end_date}]
Collection of all Events.

Attributes:

- total

+ Model (application/json)

    + Body

            {
                "events": [
                    {
                        "id": 0,
                        "created_at": "2014-01-01T00:00:00Z‚Äù,
                        "owner": "Elmer",
                        "event_name": "McHack",
                        "event_short_description": "Find out who can make the best McBurger.",
                        "event_long_description": "Find out who can make the best McBurger. Given some burgers, cheese and condiments, let's see what you can do in 24 hours.",
                        "who_is_attending": "Elmer, SendGrid",
                        "start_date": "2014-04-01",
                        "end_date": "2014-04-05",
                        "name_of_venue": "McDonalds",
                        "address": "400 N. Lee Street",
                        "city": "Des Plaines",
                        "state": "IL",
                        "country": "USA",
                        "event_type": "other, cookathon",
                        "sendgrid_api_uses": 0,
                        "number_of_attendees": 100,
                        "partipation": "demo sendgrid api, serve as mentor, other, cook",
                        "audience_type": "evenly split between technical and non-technical",
                        "education_focused": 1,
                        "should_we_attend": 1,
                        "registration_link": "www.mchack.com",
                        "comments": "This was the most delicious hackathon ever. We should try to attend one for Burger King too."
                    },
                    {
                        "id": 1,
                        "created_at": "2014-01-01T00:00:00Z‚Äù,
                        "owner": "Elmer",
                        "event_name": "McHack 2!",
                        "event_short_description": "Find out who can make the best McBurger.",
                        "event_long_description": "Find out who can make the best McBurger. Given some burgers, cheese and condiments, let's see what you can do in 24 hours.",
                        "who_is_attending": "Elmer, SendGrid",
                        "start_date": "2014-05-01",
                        "end_date": "2014-05-05",
                        "name_of_venue": "McDonalds",
                        "address": "400 N. Lee Street",
                        "city": "Des Plaines",
                        "state": "IL",
                        "country": "USA",
                        "event_type": "other, cookathon",
                        "sendgrid_api_uses": 0,
                        "number_of_attendees": 200,
                        "partipation": "demo sendgrid api, serve as mentor, other, cook",
                        "audience_type": "evenly split between technical and non-technical",
                        "education_focused": 1,
                        "should_we_attend": 1,
                        "registration_link": "www.mchack2.com",
                        "comments": "This was the most delicious hackathon ever. We should try to attend one for Burger King too."
                    }
                ],
                "total": 2
            }

### List All Events [GET]

+ Parameters
    + start_date (optional, string) ... Timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ` Only Events created at or after this time are returned
    + end_date (optional, string) ... Timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ` Truncate returned Events on this date

+ Response 200

    [Event Collection][]

# Group Feedback
A representation of SendGrid feedback provided by the dev rel team.

## Feedback [/feedback/{id}]
A single Feedback object. It represents one piece of feedback.

Required attributes: 

- `id` Automatically assigned
- `created_at` Automatically assigned
- `creator` If Evangelist or Ambassador, represent by their ID, otherwise use Product, ID = 1000
- `source`
- `title`
- `description`

Optional attributes:

- `jira_id`
- `status`
- `owner` Current owner

+ Parameters
    + id (required, int) ... ID of the Feedback in the form of an integer

+ Model (application/json)

    + Body

            {
                "id": 0,
                "created_at": "2014-01-01T00:00:00Z",
                "creator": 1,
                "owner": "Product",
                "source": "Spotify",
                "jira_id": "https://jira.sendgrid.net/browse/SB-74",
                "status": "Open",
                "title": "UI needed for Parse API to return an additional field which posts the entire raw message.",
                "description": "As a user I would like for the Parse API to return an additional field which posts the entire raw message (the full EML content)."
            }

### Retrieve a single Feedback [GET]
+ Response 200 (application/json)
    
    [Feedback][]

### Edit a Feedback [PATCH]

+ Request (application/json)

        {
            "owner": "Dominic",
        }

+ Response 200
    
    [Feedback][]

### Delete a Feedback [DELETE]

+ Response 204

### Create a Feedback [POST]
To create a new Feedback simply provide a JSON hash of the required attributes for the new Feedback resource. 

+ Request (application/json)

        {
            "creator": 0,
            "source": "Rdio".
            "title": "Install me",
            "description": "Rdio wants all of us to ditch Spotify and use Rdio instead."
        }

+ Response 201

    [Feedback][]

## Feedback Collection [/feedback{?start_date,end_date}]
Collection of all Feedback.

Attributes:

- total

+ Model (application/json)

    + Body

            {
                "feedback": [
                    {
                        "id": 0,
                        "created_at": "2014-01-01T00:00:00Z",
                        "jira_id": "NULL",
                        "status": "Open"
                    },
                    {
                        "id": 1,
                        "created_at": "2014-01-01T00:00:00Z",
                        "jira_id": "https://jira.sendgrid.net/browse/SB-74",
                        "status": "Open"
                    }
                ],
                "total": 2
            }
        
### List All Feedback [GET]

+ Parameters
    + start_date (optional, string) ... Timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ` Only Feedback created at or after this time are returned
    + end_date (optional, string) ... Timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ` Truncate returned Feedback on this date
    
+ Response 200

    [Feedback Collection][]

# Group Project
Projects that the Dev Rel team is working on.

## Project [/project/{id}]
A single Project object, representing a single project.

Required attributes: 

- `id` Automatically assigned
- `created_at` Automatically assigned
- `owner` Evangelist or Ambassador
- `name`
- `description`

Optional attributes:

- `status`
- `url`

+ Parameters
    + id (string) ... ID of the Project in the form of an integer

+ Model (application/json)

    + Body

            {
                "id": 0,
                "created_at": "2014-01-01T00:00:00Z",
                "owner": 0,
                "name": "Dev Rel App",
                "description": "The app that will be created using this API",
                "status": "In Progress"
                "url": "http://docs.sendgrid.apiary.io/"
            }

### Retrieve a single Project [GET]
+ Response 200 (application/json)
    
    [Project][]

### Edit a Project [PATCH]

+ Request (application/json)

        {
            "status": "On Fire",
        }

+ Response 200
    
    [Project][]

### Delete a Project [DELETE]
+ Response 204

### Create a Project [POST]

+ Request (application/json)

        {
            "owner": 1,
            "name": "Wreslemania",
            "description": "A wrestling revivial."
        }

+ Response 201

    [Project][]

### Project Collection [/projects]
Collection of all Projects.

The Project Collection resource has the following attribute:

- `total` Total number of records returned

+ Model (application/json)

    + Body

            {
                "projects": [
                    {
                        "id": 0,
                        "created_at": "2014-01-01T00:00:00Z",
                        "owner": "Elmer",
                        "name": "Dev Rel App",
                        "description": "The app that will be created using this API."
                    },
                    {
                        "id": 1,
                        "created_at": "2014-01-01T00:00:00Z",
                        "owner": "Elmer",
                        "name": "Wreslemania",
                        "description": "A wrestling revival."
                    }
                ],
                "total": 2
            }

### List All Projects [GET]

+ Response 200

    [Project Collection][]

# Group Blog
Blog posts that members of the Dev Rel team wrote.

## Blog [/blog/{id}]
A single Blog object, representing one blog post.

Required attributes: 

- `id` Automatically assigned
- `created_at` Automatically assigned
- `author` Evangelist or Ambassador
- `url`
- `title`

Optional attributes""

- `content_type`
- `status`
- `date_published`
- `start_date` Use this if you want to get stats within a certain time frame
- `end_date`
- `unique_views`
- `views`
- `conversions`

+ Parameters
    + id (required, int) ... ID of the Blog in the form of an integer

+ Model (application/json)

    + Body

            {
                "id": 0,
                "created_at": "2014-01-01T00:00:00Z",
                "author": 0,
                "url": "http://www.sendgrid.com/blog/the-best-blog-post-eva",
                "title": "The Best Blog Post Eva!!!",
                "content_type": "Technical",
                "status": "Published",
                "date_published": "2014-01-01T00:00:00Z",
                "start_date": "2014-01-01T00:00:00Z",
                "end_date": "2014-02-01T00:00:00Z",
                "unique_views": 1000000,
                "views": 5000000,
                "conversion": 100000
            }

### Retrieve a single Blog [GET]

+ Response 200 (application/json)
    
    [Blog][]

### Edit a Blog [PATCH]

+ Request (application/json)

        {
            "content_type": "Tutorial",
        }

+ Response 200
    
    [Blog][]

### Delete a Blog [DELETE]
+ Response 204

### Create a Blog [POST]
To create a new Blog simply provide a JSON hash of the required attributes for the new Blog resource. 

+ Request (application/json)

        {
            "author": 1,
            "url": "http://www.sendgrid.com/blog/why-wrestlemania-is-totally-technical",
            "title": "Why Wrestlemania is Totally Technical"
        }

+ Response 201

    [Blog][]

### Blog Collection [/blogs{?start_date,end_date}]
Collection of all Blogs.

Attributes:

- `total` Total number of records returned

+ Model (application/json)

    + Body

            {
                "blogs": [
                    {
                        "id": 0,
                        "created_at": "2014-01-01T00:00:00Z",
                        "author": "Elmer",
                        "url": "http://www.sendgrid.com/blog/the-best-blog-post-eva",
                        "title": "The Best Blog Post Eva!!!"
                    },
                    {
                        "id": 1,
                        "created_at": "2014-01-01T00:00:00Z",
                        "author": "Elmer",
                        "url": "http://www.sendgrid.com/blog/why-wrestlemania-is-totally-technical",
                        "title": "Why Wrestlemania is Totally Technical"
                    }
                ],
                "total": 2
            }
        
### List All Blogs [GET]

+ Parameters
    + start_date (optional, string) ... Timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ` Only Blogs created at or after this time are returned
    + end_date (optional, string) ... Timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ` Truncate returned Blogs on this date

+ Response 200

    [Blog Collection][]

# Group Accelerator
Acclerators created and/or managed by the Dev Rel team (or Dev Rel systems)

## Accelerator [/accelerator/{id}]
A single Accelerator object, representing one Accelerator.

Required attributes: 

- `id` Automatically assigned
- `created_at` Automatically assigned
- `owner` Who obtained the accelerator, id of an Evangelist/Ambassador or can be hack.sendgrid.com or sendgrid.com/developers
- `name`
- `address`
- `city`
- `country`
- `zip_code`
- `state`

Optional attributes:

- `members`
- `coupon_code`
- `num_visits`
- `last_visit_date`
- `notes` Additional comments

+ Parameters
    + id (required, int) ... ID of the Accelerator in the form of an integer

+ Model (application/json)

    + Body

            {
                "id": 0,
                "created_at": "2014-01-01T00:00:00Z",
                "owner": "Elmer",
                "name": "Incubator Maxx",
                "address": "1234 Sesame St.",
                "city": "San Francisco",
                "country": "USA",
                "zip_code": "1234",
                "state": "California",
                "members": 40,
                "coupon_code": "sesame_street_sendgrid",
                "num_visits": 4,
                "last_visit_date": "2014-01-20T00:00:00Z",
                "notes": "This is cool place, but that Oscar is a grouch."
            }

### Retrieve a single Accelerator [GET]
+ Response 200 (application/json)
    
    [Accelerator][]

### Edit a Accelerator [PATCH]
To update a Accelerator send a JSON with updated value for one or more of the Accelerator resource attributes. All attributes values (states) from the previous version of this Accelerator are carried over by default if not included in the hash.

+ Request (application/json)

        {
            "notes": "Forget Oscar, hang out with Elmo instead."
        }

+ Response 200
    
    [Accelerator][]

### Delete a Accelerator [DELETE]
+ Response 204

### Create a Accelerator [POST]
To create a new Accelerator simply provide a JSON hash of the required attributes for the new Accelerator. 

+ Request (application/json)

        {
            "owner": "Elmer",
            "name": "Accelerators are Us",
            "address": "4444 Hope Lane",
            "city": "Big City",
            "country": "USA",
            "zip_code": "1111",
            "state": "Boston"
        }

+ Response 201

    [Accelerator][]

## Accelerator Collection [/accelerator{?start_date,end_date}]
Collection of all Accelerators.

Attributes:

- `total` Total number of records returned

+ Model (application/json)

    + Body

            {
                "accelerator": [
                    {
                        "id": 0,
                        "created_at": "2014-01-01T00:00:00Z",
                        "owner": "Elmer",
                        "name": "Incubator Maxx",
                    },
                    {
                        "id": 1,
                        "created_at": "2014-01-01T00:00:00Z",
                        "owner": "Elmer",
                        "name": "Accelerators are Us",
                    }
                ],
                "total": 2
            }
        
### List All Accelerators [GET]

+ Parameters
    + start_date (optional, string) ... Timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ` Only Accelerators created at or after this time are returned.
    + end_date (optional, string) ... Timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ` Truncate returned Accelerators on this date.

+ Response 200

    [Accelerator Collection][]

# Group Social #
Social properties managed by the Dev Rel team (or Dev Rel systems)

## Twitter [/social/twitter{?start_date,end_date}]

Attributes:

- `followers`
- `retweets`
- `favorites`

+ Parameters
    + start_date (optional, string) ... Timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ` Only Twitter data created at or after this time are returned
    + end_date (optional, string) ... Timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ` Truncate returned Twitter data on this date

+ Model (application/json)

    + Body

            {
                "followers": 20000,
                "retweets": 1000,
                "favorites": 1000
            }

### Retrieve Twitter data [GET]

+ Response 200 (application/json)
    
    [Twitter][]

## StackOverflow [/social/stackoverflow{?id,start_date,end_date}]

The StackOverflow resource has the following attributes:

- `reputation`

+ Parameters
    + id (required, int) ... The ID of a Team member
    + start_date (optional, string) ... Timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ` Only StackOverflow data created at or after this time are returned
    + end_date (optional, string) ... Timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ` Truncate returned StackOverflow data on this date

+ Model (application/json)

    + Body

            {
                "id": 0,
                "reputation": 100
            }

### Retrieve StackOverflow data [GET]

+ Response 200 (application/json)
    
    [StackOverflow][]

## Quora [/social/quora{?start_date,end_date}]

The Quora resource has the following attributes:

- `questions_answered`
- `upvotes`

+ Parameters
    + start_date (optional, string) ... Timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ` Only Quora data created at or after this time are returned
    + end_date (optional, string) ... Timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ` Truncate returned Quora data on this date

+ Model (application/json)

    + Body

            {
                "questions_answered": 100,
                "upvotes": 10
            }

### Retrieve Quora data [GET]

+ Response 200 (application/json)
    
    [Quora][]

## Facebook [/social/facebook{?start_date,end_date}]

The Facebook resource has the following attributes:

- `likes`

+ Parameters
    + start_date (optional, string) ... Timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ` Only Facebook data created at or after this time are returned
    + end_date (optional, string) ... Timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ` Truncate returned Facebook data on this date

+ Model (application/json)

    + Body

            {
                "likes": 10000
            }

### Retrieve Facebook data [GET]
+ Response 200 (application/json)

    [Facebook][]

## Gplus [/social/gplus{?start_date,end_date}] ##
The Gplus resource has the following attributes:
- `followers`
- `plusses`

+ Parameters
    + start_date (optional, string) ... Timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ` Only Gplus data created at or after this time are returned
    + end_date (optional, string) ... Timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ` Truncate returned Gplus data on this date

+ Model (application/json)

    + Body

            {
                "followers": 20000,
                "plusses": 1000
            }

### Retrieve Gplus data [GET]

+ Response 200 (application/json)
    
    [Gplus][]

## Klout [/social/klout{?start_date,end_date}]
The Klout resource has the following attributes:
- `score`

+ Parameters
    + start_date (optional, string) ... Timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ` Only Klout data created at or after this time are returned
    + end_date (optional, string) ... Timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ` Truncate returned Klout data on this date

+ Model (application/json)

    + Body

            {
                "score": 100
            }

### Retrieve Klout data [GET]

+ Response 200 (application/json)
    
    [Klout][]

# Group OpenSource
Open source libraries managed by the Dev Rel team (or Dev Rel systems)

## Docs [/social/Docs{?start_date,end_date}]

The Docs resource has the following attributes:

- `downloads`
- `forks`
- `watches`
- `stars`
- `pull_requests`
- `closed_issues`
- `new_issues`
- `traffic` Traffic referred to sendgrid.com/*
- `contributors`

+ Parameters
    + start_date (optional, string) ... Timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ` Only Docs data created at or after this time are returned
    + end_date (optional, string) ... Timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ` Truncate returned Doc data on this date

+ Model (application/json)

    + Body

            {
                "downloads": 1000000,
                "forks": 5000,
                "watches": 60000,
                "stars": 10000,
                "pull_requests": 500000,
                "closed_issues": 1000,
                "new_issues_": 100,
                "traffic": 2000000,
                "contributors": 10
            }

### Retrieve Docs data [GET]

+ Response 200 (application/json)
    
    [Docs][]

## Csharp [/social/Csharp{?start_date,end_date}]

The Csharp resource has the following attributes:

- `downloads`
- `forks`
- `watches`
- `stars`
- `pull_requests`
- `closed_issues`
- `new_issues`
- `traffic` Traffic referred to sendgrid.com/*
- `contributors`

+ Parameters
    + start_date (optional, string) ... Timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ` Only Csharp data created at or after this time are returned
    + end_date (optional, string) ... Timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ` Truncate returned Csharp data on this date

+ Model (application/json)

    + Body

            {
                "downloads": 1000000,
                "forks": 5000,
                "watches": 60000,
                "stars": 10000,
                "pull_requests": 500000,
                "closed_issues": 1000,
                "new_issues_": 100,
                "traffic": 2000000,
                "contributors": 10
            }

### Retrieve Csharp data [GET]

+ Response 200 (application/json)
    
    [Csharp][]

## Java [/social/Java{?start_date,end_date}]

The Java resource has the following attributes:

- `downloads`
- `forks`
- `watches`
- `stars`
- `pull_requests`
- `closed_issues`
- `new_issues`
- `traffic` Traffic referred to sendgrid.com/*
- `contributors`

+ Parameters
    + start_date (optional, string) ... Timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ` Only Java data created at or after this time are returned
    + end_date (optional, string) ... Timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ` Truncate returned Java data on this date

+ Model (application/json)

    + Body

            {
                "downloads": 1000000,
                "forks": 5000,
                "watches": 60000,
                "stars": 10000,
                "pull_requests": 500000,
                "closed_issues": 1000,
                "new_issues_": 100,
                "traffic": 2000000,
                "contributors": 10
            }

### Retrieve Java data [GET]

+ Response 200 (application/json)
    
    [Java][]

## NodeJS [/social/NodeJS{?start_date,end_date}]

The NodeJS resource has the following attributes:

- `downloads`
- `forks`
- `watches`
- `stars`
- `pull_requests`
- `closed_issues`
- `new_issues`
- `traffic` Traffic referred to sendgrid.com/*
- `contributors`

+ Parameters
    + start_date (optional, string) ... Timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ` Only NodeJS data created at or after this time are returned
    + end_date (optional, string) ... Timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ` Truncate returned NodeJS data on this date

+ Model (application/json)

    + Body

            {
                "downloads": 1000000,
                "forks": 5000,
                "watches": 60000,
                "stars": 10000,
                "pull_requests": 500000,
                "closed_issues": 1000,
                "new_issues_": 100,
                "traffic": 2000000,
                "contributors": 10
            }

### Retrieve NodeJS data [GET]

+ Response 200 (application/json)
    
    [NodeJS][]

## ObjC [/social/ObjC{?start_date,end_date}]

The ObjC resource has the following attributes:

- `downloads`
- `forks`
- `watches`
- `stars`
- `pull_requests`
- `closed_issues`
- `new_issues`
- `traffic` Traffic referred to sendgrid.com/*
- `contributors`

+ Parameters
    + start_date (optional, string) ... Timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ` Only ObjC data created at or after this time are returned
    + end_date (optional, string) ... Timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ` Truncate returned ObjC data on this date

+ Model (application/json)

    + Body

            {
                "downloads": 1000000,
                "forks": 5000,
                "watches": 60000,
                "stars": 10000,
                "pull_requests": 500000,
                "closed_issues": 1000,
                "new_issues_": 100,
                "traffic": 2000000,
                "contributors": 10
            }

### Retrieve ObjC data [GET]

+ Response 200 (application/json)
    
    [ObjC][]

## Perl [/social/Perl{?start_date,end_date}]

The Perl resource has the following attributes:

- `downloads`
- `forks`
- `watches`
- `stars`
- `pull_requests`
- `closed_issues`
- `new_issues`
- `traffic` Traffic referred to sendgrid.com/*
- `contributors`

+ Parameters
    + start_date (optional, string) ... Timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ` Only Perl data created at or after this time are returned
    + end_date (optional, string) ... Timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ` Truncate returned Perl data on this date

+ Model (application/json)

    + Body

            {
                "downloads": 1000000,
                "forks": 5000,
                "watches": 60000,
                "stars": 10000,
                "pull_requests": 500000,
                "closed_issues": 1000,
                "new_issues_": 100,
                "traffic": 2000000,
                "contributors": 10
            }

### Retrieve Perl data [GET]

+ Response 200 (application/json)
    
    [Perl][]

## PHP [/social/PHP{?start_date,end_date}]

The PHP resource has the following attributes:

- `downloads`
- `forks`
- `watches`
- `stars`
- `pull_requests`
- `closed_issues`
- `new_issues`
- `traffic` Traffic referred to sendgrid.com/*
- `contributors`

+ Parameters
    + start_date (optional, string) ... Timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ` Only PHP data created at or after this time are returned
    + end_date (optional, string) ... Timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ` Truncate returned PHP data on this date

+ Model (application/json)

    + Body

            {
                "downloads": 1000000,
                "forks": 5000,
                "watches": 60000,
                "stars": 10000,
                "pull_requests": 500000,
                "closed_issues": 1000,
                "new_issues_": 100,
                "traffic": 2000000,
                "contributors": 10
            }

### Retrieve PHP data [GET]

+ Response 200 (application/json)
    
    [PHP][]

## Python [/social/Python{?start_date,end_date}]

The Python resource has the following attributes:

- `downloads`
- `forks`
- `watches`
- `stars`
- `pull_requests`
- `closed_issues`
- `new_issues`
- `traffic` Traffic referred to sendgrid.com/*
- `contributors`

+ Parameters
    + start_date (optional, string) ... Timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ` Only Python data created at or after this time are returned
    + end_date (optional, string) ... Timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ` Truncate returned Python data on this date

+ Model (application/json)

    + Body

            {
                "downloads": 1000000,
                "forks": 5000,
                "watches": 60000,
                "stars": 10000,
                "pull_requests": 500000,
                "closed_issues": 1000,
                "new_issues_": 100,
                "traffic": 2000000,
                "contributors": 10
            }

### Retrieve Python data [GET]

+ Response 200 (application/json)
    
    [Python][]